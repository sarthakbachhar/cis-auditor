---
- name: "CIS Level 1 Ubuntu Server Audit"
  hosts: all
  become: yes
  gather_facts: yes
  
  tasks:
    # 1.1.1.1 Ensure cramfs filesystems are disabled
    - name: "CIS 1.1.1.1 | L1 | Check cramfs filesystem is disabled"
      shell: |
        if lsmod | grep cramfs > /dev/null 2>&1; then
          echo "LOADED"
        elif modprobe -n -v cramfs 2>&1 | grep -E "(install /bin/true|blacklist cramfs)" > /dev/null; then
          echo "DISABLED"
        else
          echo "ENABLED"
        fi
      register: cramfs_check
      changed_when: false
      failed_when: false

    - name: "CIS 1.1.1.1 | L1 | Result: Pass if cramfs is disabled"
      debug:
        msg: "Compliant: cramfs filesystem is properly disabled."
      when: cramfs_check.stdout == "DISABLED"

    - name: "CIS 1.1.1.1 | L1 | Result: Fail if cramfs is not disabled"
      fail:
        msg: "Remediation: Run 'echo install cramfs /bin/true >> /etc/modprobe.d/CIS.conf' and 'rmmod cramfs'"
      when: cramfs_check.stdout != "DISABLED"
      ignore_errors: yes

    # 1.1.1.2 Ensure freevxfs filesystems are disabled
    - name: "CIS 1.1.1.2 | L1 | Check freevxfs filesystem is disabled"
      shell: |
        if lsmod | grep freevxfs > /dev/null 2>&1; then
          echo "LOADED"
        elif modprobe -n -v freevxfs 2>&1 | grep -E "(install /bin/true|blacklist freevxfs)" > /dev/null; then
          echo "DISABLED"
        else
          echo "ENABLED"
        fi
      register: freevxfs_check
      changed_when: false
      failed_when: false

    - name: "CIS 1.1.1.2 | L1 | Result: Pass if freevxfs is disabled"
      debug:
        msg: "Compliant: freevxfs filesystem is properly disabled."
      when: freevxfs_check.stdout == "DISABLED"

    - name: "CIS 1.1.1.2 | L1 | Result: Fail if freevxfs is not disabled"
      fail:
        msg: "Remediation: Run 'echo install freevxfs /bin/true >> /etc/modprobe.d/CIS.conf' and 'rmmod freevxfs'"
      when: freevxfs_check.stdout != "DISABLED"
      ignore_errors: yes

    # 1.1.1.3 Ensure jffs2 filesystems are disabled
    - name: "CIS 1.1.1.3 | L1 | Check jffs2 filesystem is disabled"
      shell: |
        if lsmod | grep jffs2 > /dev/null 2>&1; then
          echo "LOADED"
        elif modprobe -n -v jffs2 2>&1 | grep -E "(install /bin/true|blacklist jffs2)" > /dev/null; then
          echo "DISABLED"
        else
          echo "ENABLED"
        fi
      register: jffs2_check
      changed_when: false
      failed_when: false

    - name: "CIS 1.1.1.3 | L1 | Result: Pass if jffs2 is disabled"
      debug:
        msg: "Compliant: jffs2 filesystem is properly disabled."
      when: jffs2_check.stdout == "DISABLED"

    - name: "CIS 1.1.1.3 | L1 | Result: Fail if jffs2 is not disabled"
      fail:
        msg: "Remediation: Run 'echo install jffs2 /bin/true >> /etc/modprobe.d/CIS.conf' and 'rmmod jffs2'"
      when: jffs2_check.stdout != "DISABLED"
      ignore_errors: yes

    # 1.1.1.4 Ensure hfs filesystems are disabled
    - name: "CIS 1.1.1.4 | L1 | Check hfs filesystem is disabled"
      shell: |
        if lsmod | grep hfs > /dev/null 2>&1; then
          echo "LOADED"
        elif modprobe -n -v hfs 2>&1 | grep -E "(install /bin/true|blacklist hfs)" > /dev/null; then
          echo "DISABLED"
        else
          echo "ENABLED"
        fi
      register: hfs_check
      changed_when: false
      failed_when: false

    - name: "CIS 1.1.1.4 | L1 | Result: Pass if hfs is disabled"
      debug:
        msg: "Compliant: hfs filesystem is properly disabled."
      when: hfs_check.stdout == "DISABLED"

    - name: "CIS 1.1.1.4 | L1 | Result: Fail if hfs is not disabled"
      fail:
        msg: "Remediation: Run 'echo install hfs /bin/true >> /etc/modprobe.d/CIS.conf' and 'rmmod hfs'"
      when: hfs_check.stdout != "DISABLED"
      ignore_errors: yes

    # 1.1.1.5 Ensure hfsplus filesystems are disabled
    - name: "CIS 1.1.1.5 | L1 | Check hfsplus filesystem is disabled"
      shell: |
        if lsmod | grep hfsplus > /dev/null 2>&1; then
          echo "LOADED"
        elif modprobe -n -v hfsplus 2>&1 | grep -E "(install /bin/true|blacklist hfsplus)" > /dev/null; then
          echo "DISABLED"
        else
          echo "ENABLED"
        fi
      register: hfsplus_check
      changed_when: false
      failed_when: false

    - name: "CIS 1.1.1.5 | L1 | Result: Pass if hfsplus is disabled"
      debug:
        msg: "Compliant: hfsplus filesystem is properly disabled."
      when: hfsplus_check.stdout == "DISABLED"

    - name: "CIS 1.1.1.5 | L1 | Result: Fail if hfsplus is not disabled"
      fail:
        msg: "Remediation: Run 'echo install hfsplus /bin/true >> /etc/modprobe.d/CIS.conf' and 'rmmod hfsplus'"
      when: hfsplus_check.stdout != "DISABLED"
      ignore_errors: yes

    # 1.1.1.6 Ensure udf filesystems are disabled
    - name: "CIS 1.1.1.6 | L1 | Check udf filesystem is disabled"
      shell: |
        if lsmod | grep udf > /dev/null 2>&1; then
          echo "LOADED"
        elif modprobe -n -v udf 2>&1 | grep -E "(install /bin/true|blacklist udf)" > /dev/null; then
          echo "DISABLED"
        else
          echo "ENABLED"
        fi
      register: udf_check
      changed_when: false
      failed_when: false

    - name: "CIS 1.1.1.6 | L1 | Result: Pass if udf is disabled"
      debug:
        msg: "Compliant: udf filesystem is properly disabled."
      when: udf_check.stdout == "DISABLED"

    - name: "CIS 1.1.1.6 | L1 | Result: Fail if udf is not disabled"
      fail:
        msg: "Remediation: Run 'echo install udf /bin/true >> /etc/modprobe.d/CIS.conf' and 'rmmod udf'"
      when: udf_check.stdout != "DISABLED"
      ignore_errors: yes

    # 2.1.1 Ensure xinetd is not installed
    - name: "CIS 2.1.1 | L1 | Check xinetd is not installed"
      package:
        name: xinetd
        state: absent
      check_mode: yes
      register: xinetd_check
      failed_when: false

    - name: "CIS 2.1.1 | L1 | Result: Pass if xinetd is not installed"
      debug:
        msg: "Compliant: xinetd is not installed."
      when: not xinetd_check.changed

    - name: "CIS 2.1.1 | L1 | Result: Fail if xinetd is installed"
      fail:
        msg: "Remediation: Remove xinetd with 'apt purge xinetd'"
      when: xinetd_check.changed
      ignore_errors: yes

    # 2.1.2 Ensure openbsd-inetd is not installed
    - name: "CIS 2.1.2 | L1 | Check openbsd-inetd is not installed"
      package:
        name: openbsd-inetd
        state: absent
      check_mode: yes
      register: openbsd_inetd_check
      failed_when: false

    - name: "CIS 2.1.2 | L1 | Result: Pass if openbsd-inetd is not installed"
      debug:
        msg: "Compliant: openbsd-inetd is not installed."
      when: not openbsd_inetd_check.changed

    - name: "CIS 2.1.2 | L1 | Result: Fail if openbsd-inetd is installed"
      fail:
        msg: "Remediation: Remove openbsd-inetd with 'apt purge openbsd-inetd'"
      when: openbsd_inetd_check.changed
      ignore_errors: yes

    # 4.1.1.1 Ensure auditd is installed
    - name: "CIS 4.1.1.1 | L1 | Check auditd is installed"
      package:
        name: auditd
        state: present
      check_mode: yes
      register: auditd_check
      failed_when: false

    - name: "CIS 4.1.1.1 | L1 | Result: Pass if auditd is installed"
      debug:
        msg: "Compliant: auditd is installed."
      when: not auditd_check.changed

    - name: "CIS 4.1.1.1 | L1 | Result: Fail if auditd is not installed"
      fail:
        msg: "Remediation: Install auditd with 'apt install auditd audispd-plugins'"
      when: auditd_check.changed
      ignore_errors: yes

    # 5.1.1 Ensure cron daemon is enabled
    - name: "CIS 5.1.1 | L1 | Check cron daemon is enabled"
      systemd:
        name: cron
        enabled: yes
      check_mode: yes
      register: cron_enabled_check
      failed_when: false

    - name: "CIS 5.1.1 | L1 | Result: Pass if cron daemon is enabled"
      debug:
        msg: "Compliant: cron daemon is enabled."
      when: not cron_enabled_check.changed

    - name: "CIS 5.1.1 | L1 | Result: Fail if cron daemon is not enabled"
      fail:
        msg: "Remediation: Enable cron service with 'systemctl enable cron'"
      when: cron_enabled_check.changed
      ignore_errors: yes

    # 5.1.2 Ensure permissions on /etc/crontab are configured
    - name: "CIS 5.1.2 | L1 | Check /etc/crontab permissions"
      stat:
        path: "/etc/crontab"
      register: crontab_stat

    - name: "CIS 5.1.2 | L1 | Result: Pass if /etc/crontab permissions are correct"
      debug:
        msg: "Compliant: /etc/crontab has correct permissions and ownership."
      when: crontab_stat.stat.exists and crontab_stat.stat.mode == '0600' and crontab_stat.stat.pw_name == 'root' and crontab_stat.stat.gr_name == 'root'

    - name: "CIS 5.1.2 | L1 | Result: Fail if /etc/crontab permissions are incorrect"
      fail:
        msg: "Remediation: Set correct permissions with 'chown root:root /etc/crontab && chmod 600 /etc/crontab'"
      when: not crontab_stat.stat.exists or crontab_stat.stat.mode != '0600' or crontab_stat.stat.pw_name != 'root' or crontab_stat.stat.gr_name != 'root'
      ignore_errors: yes

    # 5.2.1 Ensure permissions on /etc/ssh/sshd_config are configured
    - name: "CIS 5.2.1 | L1 | Check /etc/ssh/sshd_config permissions"
      stat:
        path: "/etc/ssh/sshd_config"
      register: sshd_config_stat

    - name: "CIS 5.2.1 | L1 | Result: Pass if sshd_config permissions are correct"
      debug:
        msg: "Compliant: /etc/ssh/sshd_config has correct permissions and ownership."
      when: sshd_config_stat.stat.exists and sshd_config_stat.stat.mode == '0600' and sshd_config_stat.stat.pw_name == 'root' and sshd_config_stat.stat.gr_name == 'root'

    - name: "CIS 5.2.1 | L1 | Result: Fail if sshd_config permissions are incorrect"
      fail:
        msg: "Remediation: Set correct permissions with 'chown root:root /etc/ssh/sshd_config && chmod 600 /etc/ssh/sshd_config'"
      when: not sshd_config_stat.stat.exists or sshd_config_stat.stat.mode != '0600' or sshd_config_stat.stat.pw_name != 'root' or sshd_config_stat.stat.gr_name != 'root'
      ignore_errors: yes

    # 5.2.8 Ensure SSH root login is disabled
    - name: "CIS 5.2.8 | L1 | Check SSH root login is disabled"
      shell: |
        if grep -q "^PermitRootLogin no" /etc/ssh/sshd_config 2>/dev/null; then
          echo "COMPLIANT"
        else
          echo "NON_COMPLIANT"
        fi
      register: ssh_rootlogin_check
      changed_when: false
      failed_when: false

    - name: "CIS 5.2.8 | L1 | Result: Pass if SSH root login is disabled"
      debug:
        msg: "Compliant: SSH root login is disabled."
      when: ssh_rootlogin_check.stdout == "COMPLIANT"

    - name: "CIS 5.2.8 | L1 | Result: Fail if SSH root login is not disabled"
      fail:
        msg: "Remediation: Add 'PermitRootLogin no' to /etc/ssh/sshd_config and restart ssh service"
      when: ssh_rootlogin_check.stdout != "COMPLIANT"
      ignore_errors: yes

    # 6.1.2 Ensure permissions on /etc/passwd are configured
    - name: "CIS 6.1.2 | L1 | Check /etc/passwd permissions"
      stat:
        path: "/etc/passwd"
      register: passwd_stat

    - name: "CIS 6.1.2 | L1 | Result: Pass if /etc/passwd permissions are correct"
      debug:
        msg: "Compliant: /etc/passwd has correct permissions and ownership."
      when: passwd_stat.stat.exists and passwd_stat.stat.mode == '0644' and passwd_stat.stat.pw_name == 'root' and passwd_stat.stat.gr_name == 'root'

    - name: "CIS 6.1.2 | L1 | Result: Fail if /etc/passwd permissions are incorrect"
      fail:
        msg: "Remediation: Set correct permissions with 'chown root:root /etc/passwd && chmod 644 /etc/passwd'"
      when: not passwd_stat.stat.exists or passwd_stat.stat.mode != '0644' or passwd_stat.stat.pw_name != 'root' or passwd_stat.stat.gr_name != 'root'
      ignore_errors: yes

    # 6.1.3 Ensure permissions on /etc/shadow are configured
    - name: "CIS 6.1.3 | L1 | Check /etc/shadow permissions"
      stat:
        path: "/etc/shadow"
      register: shadow_stat

    - name: "CIS 6.1.3 | L1 | Result: Pass if /etc/shadow permissions are correct"
      debug:
        msg: "Compliant: /etc/shadow has correct permissions and ownership."
      when: shadow_stat.stat.exists and shadow_stat.stat.mode == '0640' and shadow_stat.stat.pw_name == 'root' and shadow_stat.stat.gr_name == 'shadow'

    - name: "CIS 6.1.3 | L1 | Result: Fail if /etc/shadow permissions are incorrect"
      fail:
        msg: "Remediation: Set correct permissions with 'chown root:shadow /etc/shadow && chmod 640 /etc/shadow'"
      when: not shadow_stat.stat.exists or shadow_stat.stat.mode != '0640' or shadow_stat.stat.pw_name != 'root' or shadow_stat.stat.gr_name != 'shadow'
      ignore_errors: yes

    # 6.1.4 Ensure permissions on /etc/group are configured
    - name: "CIS 6.1.4 | L1 | Check /etc/group permissions"
      stat:
        path: "/etc/group"
      register: group_stat

    - name: "CIS 6.1.4 | L1 | Result: Pass if /etc/group permissions are correct"
      debug:
        msg: "Compliant: /etc/group has correct permissions and ownership."
      when: group_stat.stat.exists and group_stat.stat.mode == '0644' and group_stat.stat.pw_name == 'root' and group_stat.stat.gr_name == 'root'

    - name: "CIS 6.1.4 | L1 | Result: Fail if /etc/group permissions are incorrect"
      fail:
        msg: "Remediation: Set correct permissions with 'chown root:root /etc/group && chmod 644 /etc/group'"
      when: not group_stat.stat.exists or group_stat.stat.mode != '0644' or group_stat.stat.pw_name != 'root' or group_stat.stat.gr_name != 'root'
      ignore_errors: yes

    # 6.1.5 Ensure permissions on /etc/gshadow are configured
    - name: "CIS 6.1.5 | L1 | Check /etc/gshadow permissions"
      stat:
        path: "/etc/gshadow"
      register: gshadow_stat

    - name: "CIS 6.1.5 | L1 | Result: Pass if /etc/gshadow permissions are correct"
      debug:
        msg: "Compliant: /etc/gshadow has correct permissions and ownership."
      when: gshadow_stat.stat.exists and gshadow_stat.stat.mode == '0640' and gshadow_stat.stat.pw_name == 'root' and gshadow_stat.stat.gr_name == 'shadow'

    - name: "CIS 6.1.5 | L1 | Result: Fail if /etc/gshadow permissions are incorrect"
      fail:
        msg: "Remediation: Set correct permissions with 'chown root:shadow /etc/gshadow && chmod 640 /etc/gshadow'"
      when: not gshadow_stat.stat.exists or gshadow_stat.stat.mode != '0640' or gshadow_stat.stat.pw_name != 'root' or gshadow_stat.stat.gr_name != 'shadow'
      ignore_errors: yesbin/true|blacklist hfs)" > /dev/null; then
          echo "DISABLED"
        else
          echo "ENABLED"
        fi
      register: hfs_check
      changed_when: false
      failed_when: false

    - name: "CIS 1.1.1.4 | L1 | Result: Pass if hfs is disabled"
      debug:
        msg: "Compliant: hfs filesystem is properly disabled."
      when: hfs_check.stdout == "DISABLED"

    - name: "CIS 1.1.1.4 | L1 | Result: Fail if hfs is not disabled"
      fail:
        msg: "Remediation: Run 'echo install hfs /bin/true >> /etc/modprobe.d/CIS.conf' and 'rmmod hfs'"
      when: hfs_check.stdout != "DISABLED"

    # 1.1.1.5 Ensure hfsplus filesystems are disabled
    - name: "CIS 1.1.1.5 | L1 | Check hfsplus filesystem is disabled"
      shell: |
        if lsmod | grep hfsplus > /dev/null 2>&1; then
          echo "LOADED"
        elif modprobe -n -v hfsplus 2>&1 | grep -E "(install /bin/true|blacklist hfsplus)" > /dev/null; then
          echo "DISABLED"
        else
          echo "ENABLED"
        fi
      register: hfsplus_check
      changed_when: false
      failed_when: false

    - name: "CIS 1.1.1.5 | L1 | Result: Pass if hfsplus is disabled"
      debug:
        msg: "Compliant: hfsplus filesystem is properly disabled."
      when: hfsplus_check.stdout == "DISABLED"

    - name: "CIS 1.1.1.5 | L1 | Result: Fail if hfsplus is not disabled"
      fail:
        msg: "Remediation: Run 'echo install hfsplus /bin/true >> /etc/modprobe.d/CIS.conf' and 'rmmod hfsplus'"
      when: hfsplus_check.stdout != "DISABLED"

    # 1.1.1.6 Ensure udf filesystems are disabled
    - name: "CIS 1.1.1.6 | L1 | Check udf filesystem is disabled"
      shell: |
        if lsmod | grep udf > /dev/null 2>&1; then
          echo "LOADED"
        elif modprobe -n -v udf 2>&1 | grep -E "(install /bin/true|blacklist udf)" > /dev/null; then
          echo "DISABLED"
        else
          echo "ENABLED"
        fi
      register: udf_check
      changed_when: false
      failed_when: false

    - name: "CIS 1.1.1.6 | L1 | Result: Pass if udf is disabled"
      debug:
        msg: "Compliant: udf filesystem is properly disabled."
      when: udf_check.stdout == "DISABLED"

    - name: "CIS 1.1.1.6 | L1 | Result: Fail if udf is not disabled"
      fail:
        msg: "Remediation: Run 'echo install udf /bin/true >> /etc/modprobe.d/CIS.conf' and 'rmmod udf'"
      when: udf_check.stdout != "DISABLED"

    # 1.1.2 Ensure /tmp is configured
    - name: "CIS 1.1.2 | L1 | Check /tmp is configured"
      shell: |
        if mount | grep -E '\s/tmp\s' > /dev/null || systemctl is-enabled tmp.mount 2>/dev/null | grep enabled > /dev/null; then
          echo "CONFIGURED"
        else
          echo "NOT_CONFIGURED"
        fi
      register: tmp_mount_check
      changed_when: false
      failed_when: false

    - name: "CIS 1.1.2 | L1 | Result: Pass if /tmp is configured"
      debug:
        msg: "Compliant: /tmp is properly configured as separate partition or systemd mount."
      when: tmp_mount_check.stdout == "CONFIGURED"

    - name: "CIS 1.1.2 | L1 | Result: Fail if /tmp is not configured"
      fail:
        msg: "Remediation: Configure /tmp as separate partition or enable tmp.mount systemd service with 'systemctl enable tmp.mount'"
      when: tmp_mount_check.stdout != "CONFIGURED"

    # 1.1.3 Ensure nodev option set on /tmp partition
    - name: "CIS 1.1.3 | L1 | Check nodev option on /tmp"
      shell: |
        if mount | grep -E '\s/tmp\s.*nodev' > /dev/null; then
          echo "CONFIGURED"
        else
          echo "NOT_CONFIGURED"
        fi
      register: tmp_nodev_check
      changed_when: false
      failed_when: false

    - name: "CIS 1.1.3 | L1 | Result: Pass if /tmp has nodev option"
      debug:
        msg: "Compliant: /tmp partition has nodev option set."
      when: tmp_nodev_check.stdout == "CONFIGURED"

    - name: "CIS 1.1.3 | L1 | Result: Fail if /tmp missing nodev option"
      fail:
        msg: "Remediation: Edit /etc/fstab and add nodev option to /tmp mount or configure tmp.mount with nodev"
      when: tmp_nodev_check.stdout != "CONFIGURED"

    # 1.1.4 Ensure nosuid option set on /tmp partition
    - name: "CIS 1.1.4 | L1 | Check nosuid option on /tmp"
      shell: |
        if mount | grep -E '\s/tmp\s.*nosuid' > /dev/null; then
          echo "CONFIGURED"
        else
          echo "NOT_CONFIGURED"
        fi
      register: tmp_nosuid_check
      changed_when: false
      failed_when: false

    - name: "CIS 1.1.4 | L1 | Result: Pass if /tmp has nosuid option"
      debug:
        msg: "Compliant: /tmp partition has nosuid option set."
      when: tmp_nosuid_check.stdout == "CONFIGURED"

    - name: "CIS 1.1.4 | L1 | Result: Fail if /tmp missing nosuid option"
      fail:
        msg: "Remediation: Edit /etc/fstab and add nosuid option to /tmp mount or configure tmp.mount with nosuid"
      when: tmp_nosuid_check.stdout != "CONFIGURED"

    # 1.1.5 Ensure noexec option set on /tmp partition
    - name: "CIS 1.1.5 | L1 | Check noexec option on /tmp"
      shell: |
        if mount | grep -E '\s/tmp\s.*noexec' > /dev/null; then
          echo "CONFIGURED"
        else
          echo "NOT_CONFIGURED"
        fi
      register: tmp_noexec_check
      changed_when: false
      failed_when: false

    - name: "CIS 1.1.5 | L1 | Result: Pass if /tmp has noexec option"
      debug:
        msg: "Compliant: /tmp partition has noexec option set."
      when: tmp_noexec_check.stdout == "CONFIGURED"

    - name: "CIS 1.1.5 | L1 | Result: Fail if /tmp missing noexec option"
      fail:
        msg: "Remediation: Edit /etc/fstab and add noexec option to /tmp mount or configure tmp.mount with noexec"
      when: tmp_noexec_check.stdout != "CONFIGURED"

    # 2.1.1 Ensure xinetd is not installed
    - name: "CIS 2.1.1 | L1 | Check xinetd is not installed"
      package:
        name: xinetd
        state: absent
      check_mode: yes
      register: xinetd_check
      failed_when: false

    - name: "CIS 2.1.1 | L1 | Result: Pass if xinetd is not installed"
      debug:
        msg: "Compliant: xinetd is not installed."
      when: not xinetd_check.changed

    - name: "CIS 2.1.1 | L1 | Result: Fail if xinetd is installed"
      fail:
        msg: "Remediation: Remove xinetd with 'apt purge xinetd'"
      when: xinetd_check.changed

    # 2.1.2 Ensure openbsd-inetd is not installed
    - name: "CIS 2.1.2 | L1 | Check openbsd-inetd is not installed"
      package:
        name: openbsd-inetd
        state: absent
      check_mode: yes
      register: openbsd_inetd_check
      failed_when: false

    - name: "CIS 2.1.2 | L1 | Result: Pass if openbsd-inetd is not installed"
      debug:
        msg: "Compliant: openbsd-inetd is not installed."
      when: not openbsd_inetd_check.changed

    - name: "CIS 2.1.2 | L1 | Result: Fail if openbsd-inetd is installed"
      fail:
        msg: "Remediation: Remove openbsd-inetd with 'apt purge openbsd-inetd'"
      when: openbsd_inetd_check.changed

    # 3.1.1 Ensure IP forwarding is disabled
    - name: "CIS 3.1.1 | L1 | Check IP forwarding is disabled"
      shell: |
        sysctl net.ipv4.ip_forward 2>/dev/null | grep -q "net.ipv4.ip_forward = 0" && echo "DISABLED" || echo "ENABLED"
      register: ip_forward_check
      changed_when: false
      failed_when: false

    - name: "CIS 3.1.1 | L1 | Result: Pass if IP forwarding is disabled"
      debug:
        msg: "Compliant: IP forwarding is disabled."
      when: ip_forward_check.stdout == "DISABLED"

    - name: "CIS 3.1.1 | L1 | Result: Fail if IP forwarding is enabled"
      fail:
        msg: "Remediation: Set 'net.ipv4.ip_forward = 0' in /etc/sysctl.conf and run 'sysctl -w net.ipv4.ip_forward=0'"
      when: ip_forward_check.stdout != "DISABLED"

    # 3.1.2 Ensure packet redirect sending is disabled
    - name: "CIS 3.1.2 | L1 | Check packet redirect sending is disabled"
      shell: |
        all_default=$(sysctl net.ipv4.conf.all.send_redirects 2>/dev/null | cut -d= -f2 | tr -d ' ')
        default_default=$(sysctl net.ipv4.conf.default.send_redirects 2>/dev/null | cut -d= -f2 | tr -d ' ')
        if [ "$all_default" = "0" ] && [ "$default_default" = "0" ]; then
          echo "DISABLED"
        else
          echo "ENABLED"
        fi
      register: redirect_check
      changed_when: false
      failed_when: false

    - name: "CIS 3.1.2 | L1 | Result: Pass if packet redirect sending is disabled"
      debug:
        msg: "Compliant: Packet redirect sending is disabled."
      when: redirect_check.stdout == "DISABLED"

    - name: "CIS 3.1.2 | L1 | Result: Fail if packet redirect sending is enabled"
      fail:
        msg: "Remediation: Set 'net.ipv4.conf.all.send_redirects = 0' and 'net.ipv4.conf.default.send_redirects = 0' in /etc/sysctl.conf"
      when: redirect_check.stdout != "DISABLED"

    # 4.1.1.1 Ensure auditd is installed
    - name: "CIS 4.1.1.1 | L1 | Check auditd is installed"
      package:
        name: auditd
        state: present
      check_mode: yes
      register: auditd_check
      failed_when: false

    - name: "CIS 4.1.1.1 | L1 | Result: Pass if auditd is installed"
      debug:
        msg: "Compliant: auditd is installed."
      when: not auditd_check.changed

    - name: "CIS 4.1.1.1 | L1 | Result: Fail if auditd is not installed"
      fail:
        msg: "Remediation: Install auditd with 'apt install auditd audispd-plugins'"
      when: auditd_check.changed

    # 4.1.1.2 Ensure auditd service is enabled
    - name: "CIS 4.1.1.2 | L1 | Check auditd service is enabled"
      systemd:
        name: auditd
        enabled: yes
      check_mode: yes
      register: auditd_enabled_check
      failed_when: false

    - name: "CIS 4.1.1.2 | L1 | Result: Pass if auditd service is enabled"
      debug:
        msg: "Compliant: auditd service is enabled."
      when: not auditd_enabled_check.changed

    - name: "CIS 4.1.1.2 | L1 | Result: Fail if auditd service is not enabled"
      fail:
        msg: "Remediation: Enable auditd service with 'systemctl enable auditd'"
      when: auditd_enabled_check.changed

    # 5.1.1 Ensure cron daemon is enabled
    - name: "CIS 5.1.1 | L1 | Check cron daemon is enabled"
      systemd:
        name: cron
        enabled: yes
      check_mode: yes
      register: cron_enabled_check
      failed_when: false

    - name: "CIS 5.1.1 | L1 | Result: Pass if cron daemon is enabled"
      debug:
        msg: "Compliant: cron daemon is enabled."
      when: not cron_enabled_check.changed

    - name: "CIS 5.1.1 | L1 | Result: Fail if cron daemon is not enabled"
      fail:
        msg: "Remediation: Enable cron service with 'systemctl enable cron'"
      when: cron_enabled_check.changed

    # 5.1.2 Ensure permissions on /etc/crontab are configured
    - name: "CIS 5.1.2 | L1 | Check /etc/crontab permissions"
      stat:
        path: "/etc/crontab"
      register: crontab_stat

    - name: "CIS 5.1.2 | L1 | Result: Pass if /etc/crontab permissions are correct"
      debug:
        msg: "Compliant: /etc/crontab has correct permissions and ownership."
      when: crontab_stat.stat.exists and crontab_stat.stat.mode == '0600' and crontab_stat.stat.pw_name == 'root' and crontab_stat.stat.gr_name == 'root'

    - name: "CIS 5.1.2 | L1 | Result: Fail if /etc/crontab permissions are incorrect"
      fail:
        msg: "Remediation: Set correct permissions with 'chown root:root /etc/crontab && chmod 600 /etc/crontab'"
      when: not crontab_stat.stat.exists or crontab_stat.stat.mode != '0600' or crontab_stat.stat.pw_name != 'root' or crontab_stat.stat.gr_name != 'root'

    # 5.2.1 Ensure permissions on /etc/ssh/sshd_config are configured
    - name: "CIS 5.2.1 | L1 | Check /etc/ssh/sshd_config permissions"
      stat:
        path: "/etc/ssh/sshd_config"
      register: sshd_config_stat

    - name: "CIS 5.2.1 | L1 | Result: Pass if sshd_config permissions are correct"
      debug:
        msg: "Compliant: /etc/ssh/sshd_config has correct permissions and ownership."
      when: sshd_config_stat.stat.exists and sshd_config_stat.stat.mode == '0600' and sshd_config_stat.stat.pw_name == 'root' and sshd_config_stat.stat.gr_name == 'root'

    - name: "CIS 5.2.1 | L1 | Result: Fail if sshd_config permissions are incorrect"
      fail:
        msg: "Remediation: Set correct permissions with 'chown root:root /etc/ssh/sshd_config && chmod 600 /etc/ssh/sshd_config'"
      when: not sshd_config_stat.stat.exists or sshd_config_stat.stat.mode != '0600' or sshd_config_stat.stat.pw_name != 'root' or sshd_config_stat.stat.gr_name != 'root'

    # 5.2.2 Ensure SSH Protocol is set to 2
    - name: "CIS 5.2.2 | L1 | Check SSH Protocol version"
      shell: |
        if grep -q "^Protocol 2" /etc/ssh/sshd_config 2>/dev/null; then
          echo "COMPLIANT"
        elif grep -q "^Protocol" /etc/ssh/sshd_config 2>/dev/null; then
          echo "NON_COMPLIANT"
        else
          echo "DEFAULT_COMPLIANT"
        fi
      register: ssh_protocol_check
      changed_when: false
      failed_when: false

    - name: "CIS 5.2.2 | L1 | Result: Pass if SSH Protocol is set to 2"
      debug:
        msg: "Compliant: SSH Protocol is set to 2 (or default)."
      when: ssh_protocol_check.stdout in ["COMPLIANT", "DEFAULT_COMPLIANT"]

    - name: "CIS 5.2.2 | L1 | Result: Fail if SSH Protocol is not set to 2"
      fail:
        msg: "Remediation: Add 'Protocol 2' to /etc/ssh/sshd_config and restart ssh service"
      when: ssh_protocol_check.stdout == "NON_COMPLIANT"

    # 5.2.3 Ensure SSH LogLevel is set to INFO
    - name: "CIS 5.2.3 | L1 | Check SSH LogLevel"
      shell: |
        if grep -q "^LogLevel INFO" /etc/ssh/sshd_config 2>/dev/null; then
          echo "COMPLIANT"
        else
          echo "NON_COMPLIANT"
        fi
      register: ssh_loglevel_check
      changed_when: false
      failed_when: false

    - name: "CIS 5.2.3 | L1 | Result: Pass if SSH LogLevel is INFO"
      debug:
        msg: "Compliant: SSH LogLevel is set to INFO."
      when: ssh_loglevel_check.stdout == "COMPLIANT"

    - name: "CIS 5.2.3 | L1 | Result: Fail if SSH LogLevel is not INFO"
      fail:
        msg: "Remediation: Add 'LogLevel INFO' to /etc/ssh/sshd_config and restart ssh service"
      when: ssh_loglevel_check.stdout != "COMPLIANT"

    # 5.2.4 Ensure SSH X11 forwarding is disabled
    - name: "CIS 5.2.4 | L1 | Check SSH X11Forwarding is disabled"
      shell: |
        if grep -q "^X11Forwarding no" /etc/ssh/sshd_config 2>/dev/null; then
          echo "COMPLIANT"
        else
          echo "NON_COMPLIANT"
        fi
      register: ssh_x11_check
      changed_when: false
      failed_when: false

    - name: "CIS 5.2.4 | L1 | Result: Pass if SSH X11Forwarding is disabled"
      debug:
        msg: "Compliant: SSH X11Forwarding is disabled."
      when: ssh_x11_check.stdout == "COMPLIANT"

    - name: "CIS 5.2.4 | L1 | Result: Fail if SSH X11Forwarding is not disabled"
      fail:
        msg: "Remediation: Add 'X11Forwarding no' to /etc/ssh/sshd_config and restart ssh service"
      when: ssh_x11_check.stdout != "COMPLIANT"

    # 5.2.5 Ensure SSH MaxAuthTries is set to 4 or less
    - name: "CIS 5.2.5 | L1 | Check SSH MaxAuthTries"
      shell: |
        max_tries=$(grep "^MaxAuthTries" /etc/ssh/sshd_config 2>/dev/null | awk '{print $2}')
        if [ -z "$max_tries" ]; then
          echo "6"  # Default value
        else
          echo "$max_tries"
        fi
      register: ssh_maxauth_check
      changed_when: false
      failed_when: false

    - name: "CIS 5.2.5 | L1 | Result: Pass if SSH MaxAuthTries is 4 or less"
      debug:
        msg: "Compliant: SSH MaxAuthTries is set to {{ ssh_maxauth_check.stdout }} (4 or less)."
      when: ssh_maxauth_check.stdout|int <= 4

    - name: "CIS 5.2.5 | L1 | Result: Fail if SSH MaxAuthTries is more than 4"
      fail:
        msg: "Remediation: Add 'MaxAuthTries 4' to /etc/ssh/sshd_config and restart ssh service"
      when: ssh_maxauth_check.stdout|int > 4

    # 5.2.6 Ensure SSH IgnoreRhosts is enabled
    - name: "CIS 5.2.6 | L1 | Check SSH IgnoreRhosts is enabled"
      shell: |
        if grep -q "^IgnoreRhosts yes" /etc/ssh/sshd_config 2>/dev/null; then
          echo "COMPLIANT"
        elif grep -q "^IgnoreRhosts no" /etc/ssh/sshd_config 2>/dev/null; then
          echo "NON_COMPLIANT"
        else
          echo "DEFAULT_COMPLIANT"
        fi
      register: ssh_ignorerhosts_check
      changed_when: false
      failed_when: false

    - name: "CIS 5.2.6 | L1 | Result: Pass if SSH IgnoreRhosts is enabled"
      debug:
        msg: "Compliant: SSH IgnoreRhosts is enabled."
      when: ssh_ignorerhosts_check.stdout in ["COMPLIANT", "DEFAULT_COMPLIANT"]

    - name: "CIS 5.2.6 | L1 | Result: Fail if SSH IgnoreRhosts is disabled"
      fail:
        msg: "Remediation: Add 'IgnoreRhosts yes' to /etc/ssh/sshd_config and restart ssh service"
      when: ssh_ignorerhosts_check.stdout == "NON_COMPLIANT"

    # 5.2.7 Ensure SSH HostbasedAuthentication is disabled
    - name: "CIS 5.2.7 | L1 | Check SSH HostbasedAuthentication is disabled"
      shell: |
        if grep -q "^HostbasedAuthentication no" /etc/ssh/sshd_config 2>/dev/null; then
          echo "COMPLIANT"
        elif grep -q "^HostbasedAuthentication yes" /etc/ssh/sshd_config 2>/dev/null; then
          echo "NON_COMPLIANT"
        else
          echo "DEFAULT_COMPLIANT"
        fi
      register: ssh_hostbased_check
      changed_when: false
      failed_when: false

    - name: "CIS 5.2.7 | L1 | Result: Pass if SSH HostbasedAuthentication is disabled"
      debug:
        msg: "Compliant: SSH HostbasedAuthentication is disabled."
      when: ssh_hostbased_check.stdout in ["COMPLIANT", "DEFAULT_COMPLIANT"]

    - name: "CIS 5.2.7 | L1 | Result: Fail if SSH HostbasedAuthentication is enabled"
      fail:
        msg: "Remediation: Add 'HostbasedAuthentication no' to /etc/ssh/sshd_config and restart ssh service"
      when: ssh_hostbased_check.stdout == "NON_COMPLIANT"

    # 5.2.8 Ensure SSH root login is disabled
    - name: "CIS 5.2.8 | L1 | Check SSH root login is disabled"
      shell: |
        if grep -q "^PermitRootLogin no" /etc/ssh/sshd_config 2>/dev/null; then
          echo "COMPLIANT"
        else
          echo "NON_COMPLIANT"
        fi
      register: ssh_rootlogin_check
      changed_when: false
      failed_when: false

    - name: "CIS 5.2.8 | L1 | Result: Pass if SSH root login is disabled"
      debug:
        msg: "Compliant: SSH root login is disabled."
      when: ssh_rootlogin_check.stdout == "COMPLIANT"

    - name: "CIS 5.2.8 | L1 | Result: Fail if SSH root login is not disabled"
      fail:
        msg: "Remediation: Add 'PermitRootLogin no' to /etc/ssh/sshd_config and restart ssh service"
      when: ssh_rootlogin_check.stdout != "COMPLIANT"

    # 5.2.9 Ensure SSH PermitEmptyPasswords is disabled
    - name: "CIS 5.2.9 | L1 | Check SSH PermitEmptyPasswords is disabled"
      shell: |
        if grep -q "^PermitEmptyPasswords no" /etc/ssh/sshd_config 2>/dev/null; then
          echo "COMPLIANT"
        elif grep -q "^PermitEmptyPasswords yes" /etc/ssh/sshd_config 2>/dev/null; then
          echo "NON_COMPLIANT"
        else
          echo "DEFAULT_COMPLIANT"
        fi
      register: ssh_emptypass_check
      changed_when: false
      failed_when: false

    - name: "CIS 5.2.9 | L1 | Result: Pass if SSH PermitEmptyPasswords is disabled"
      debug:
        msg: "Compliant: SSH PermitEmptyPasswords is disabled."
      when: ssh_emptypass_check.stdout in ["COMPLIANT", "DEFAULT_COMPLIANT"]

    - name: "CIS 5.2.9 | L1 | Result: Fail if SSH PermitEmptyPasswords is enabled"
      fail:
        msg: "Remediation: Add 'PermitEmptyPasswords no' to /etc/ssh/sshd_config and restart ssh service"
      when: ssh_emptypass_check.stdout == "NON_COMPLIANT"

    # 5.2.10 Ensure SSH PermitUserEnvironment is disabled
    - name: "CIS 5.2.10 | L1 | Check SSH PermitUserEnvironment is disabled"
      shell: |
        if grep -q "^PermitUserEnvironment no" /etc/ssh/sshd_config 2>/dev/null; then
          echo "COMPLIANT"
        elif grep -q "^PermitUserEnvironment yes" /etc/ssh/sshd_config 2>/dev/null; then
          echo "NON_COMPLIANT"
        else
          echo "DEFAULT_COMPLIANT"
        fi
      register: ssh_userenv_check
      changed_when: false
      failed_when: false

    - name: "CIS 5.2.10 | L1 | Result: Pass if SSH PermitUserEnvironment is disabled"
      debug:
        msg: "Compliant: SSH PermitUserEnvironment is disabled."
      when: ssh_userenv_check.stdout in ["COMPLIANT", "DEFAULT_COMPLIANT"]

    - name: "CIS 5.2.10 | L1 | Result: Fail if SSH PermitUserEnvironment is enabled"
      fail:
        msg: "Remediation: Add 'PermitUserEnvironment no' to /etc/ssh/sshd_config and restart ssh service"
      when: ssh_userenv_check.stdout == "NON_COMPLIANT"

    # 5.3.1 Ensure password creation requirements are configured
    - name: "CIS 5.3.1 | L1 | Check password creation requirements"
      shell: |
        if grep -q "pam_pwquality.so" /etc/pam.d/common-password 2>/dev/null; then
          echo "CONFIGURED"
        else
          echo "NOT_CONFIGURED"
        fi
      register: pwd_requirements_check
      changed_when: false
      failed_when: false

    - name: "CIS 5.3.1 | L1 | Result: Pass if password requirements are configured"
      debug:
        msg: "Compliant: Password creation requirements are configured."
      when: pwd_requirements_check.stdout == "CONFIGURED"

    - name: "CIS 5.3.1 | L1 | Result: Fail if password requirements are not configured"
      fail:
        msg: "Remediation: Install libpam-pwquality and configure password requirements in /etc/pam.d/common-password"
      when: pwd_requirements_check.stdout != "CONFIGURED"

    # 5.4.1.1 Ensure password expiration is 365 days or less
    - name: "CIS 5.4.1.1 | L1 | Check password expiration policy"
      shell: |
        max_days=$(grep "^PASS_MAX_DAYS" /etc/login.defs 2>/dev/null | awk '{print $2}')
        if [ -n "$max_days" ] && [ "$max_days" -le 365 ] && [ "$max_days" -gt 0 ]; then
          echo "COMPLIANT"
        else
          echo "NON_COMPLIANT"
        fi
      register: pwd_max_days_check
      changed_when: false
      failed_when: false

    - name: "CIS 5.4.1.1 | L1 | Result: Pass if password expiration is 365 days or less"
      debug:
        msg: "Compliant: Password expiration is set to 365 days or less."
      when: pwd_max_days_check.stdout == "COMPLIANT"

    - name: "CIS 5.4.1.1 | L1 | Result: Fail if password expiration is more than 365 days"
      fail:
        msg: "Remediation: Set 'PASS_MAX_DAYS 365' in /etc/login.defs"
      when: pwd_max_days_check.stdout != "COMPLIANT"

    # 5.4.1.2 Ensure minimum days between password changes is 7 or more
    - name: "CIS 5.4.1.2 | L1 | Check minimum days between password changes"
      shell: |
        min_days=$(grep "^PASS_MIN_DAYS" /etc/login.defs 2>/dev/null | awk '{print $2}')
        if [ -n "$min_days" ] && [ "$min_days" -ge 7 ]; then
          echo "COMPLIANT"
        else
          echo "NON_COMPLIANT"
        fi
      register: pwd_min_days_check
      changed_when: false
      failed_when: false

    - name: "CIS 5.4.1.2 | L1 | Result: Pass if minimum days between password changes is 7 or more"
      debug:
        msg: "Compliant: Minimum days between password changes is 7 or more."
      when: pwd_min_days_check.stdout == "COMPLIANT"

    - name: "CIS 5.4.1.2 | L1 | Result: Fail if minimum days between password changes is less than 7"
      fail:
        msg: "Remediation: Set 'PASS_MIN_DAYS 7' in /etc/login.defs"
      when: pwd_min_days_check.stdout != "COMPLIANT"

    # 5.4.1.3 Ensure password expiration warning days is 7 or more
    - name: "CIS 5.4.1.3 | L1 | Check password expiration warning days"
      shell: |
        warn_age=$(grep "^PASS_WARN_AGE" /etc/login.defs 2>/dev/null | awk '{print $2}')
        if [ -n "$warn_age" ] && [ "$warn_age" -ge 7 ]; then
          echo "COMPLIANT"
        else
          echo "NON_COMPLIANT"
        fi
      register: pwd_warn_age_check
      changed_when: false
      failed_when: false

    - name: "CIS 5.4.1.3 | L1 | Result: Pass if password expiration warning is 7 days or more"
      debug:
        msg: "Compliant: Password expiration warning is set to 7 days or more."
      when: pwd_warn_age_check.stdout == "COMPLIANT"

    - name: "CIS 5.4.1.3 | L1 | Result: Fail if password expiration warning is less than 7 days"
      fail:
        msg: "Remediation: Set 'PASS_WARN_AGE 7' in /etc/login.defs"
      when: pwd_warn_age_check.stdout != "COMPLIANT"

    # 5.4.2 Ensure system accounts are non-login
    - name: "CIS 5.4.2 | L1 | Check system accounts are non-login"
      shell: |
        non_compliant_accounts=$(awk -F: '($1!="root" && $1!="sync" && $1!="shutdown" && $1!="halt" && $3<'"$(awk '/^\s*UID_MIN/{print $2}' /etc/login.defs)"' && $7!="/usr/sbin/nologin" && $7!="/bin/false") {print $1}' /etc/passwd)
        if [ -z "$non_compliant_accounts" ]; then
          echo "COMPLIANT"
        else
          echo "NON_COMPLIANT: $non_compliant_accounts"
        fi
      register: system_accounts_check
      changed_when: false
      failed_when: false

    - name: "CIS 5.4.2 | L1 | Result: Pass if system accounts are non-login"
      debug:
        msg: "Compliant: All system accounts are set to non-login."
      when: system_accounts_check.stdout == "COMPLIANT"

    - name: "CIS 5.4.2 | L1 | Result: Fail if system accounts allow login"
      fail:
        msg: "Remediation: Set shell to /usr/sbin/nologin or /bin/false for system accounts: {{ system_accounts_check.stdout }}"
      when: system_accounts_check.stdout != "COMPLIANT"

    # 5.4.3 Ensure default group for the root account is GID 0
    - name: "CIS 5.4.3 | L1 | Check default group for root account"
      shell: |
        root_gid=$(grep "^root:" /etc/passwd | cut -d: -f4)
        if [ "$root_gid" = "0" ]; then
          echo "COMPLIANT"
        else
          echo "NON_COMPLIANT"
        fi
      register: root_gid_check
      changed_when: false
      failed_when: false

    - name: "CIS 5.4.3 | L1 | Result: Pass if root default group is GID 0"
      debug:
        msg: "Compliant: Root account default group is GID 0."
      when: root_gid_check.stdout == "COMPLIANT"

    - name: "CIS 5.4.3 | L1 | Result: Fail if root default group is not GID 0"
      fail:
        msg: "Remediation: Run 'usermod -g 0 root' to set root's default group to GID 0"
      when: root_gid_check.stdout != "COMPLIANT"

    # 5.4.4 Ensure default user umask is 027 or more restrictive
    - name: "CIS 5.4.4 | L1 | Check default user umask"
      shell: |
        umask_value=$(grep -E "^\s*umask\s+" /etc/bash.bashrc /etc/profile /etc/profile.d/*.sh 2>/dev/null | grep -E "umask\s+0[0-7][0-7][0-7]" | head -1 | awk '{print $2}' | sed 's/^0*//')
        if [ -z "$umask_value" ]; then
          echo "NOT_SET"
        elif [ "$umask_value" -ge 27 ]; then
          echo "COMPLIANT"
        else
          echo "NON_COMPLIANT"
        fi
      register: umask_check
      changed_when: false
      failed_when: false

    - name: "CIS 5.4.4 | L1 | Result: Pass if default umask is 027 or more restrictive"
      debug:
        msg: "Compliant: Default umask is 027 or more restrictive."
      when: umask_check.stdout == "COMPLIANT"

    - name: "CIS 5.4.4 | L1 | Result: Fail if default umask is not 027 or more restrictive"
      fail:
        msg: "Remediation: Set 'umask 027' in /etc/bash.bashrc and /etc/profile"
      when: umask_check.stdout != "COMPLIANT"

    # 6.1.1 Audit system file permissions
    - name: "CIS 6.1.1 | L1 | Check system file permissions with dpkg"
      shell: |
        dpkg --verify 2>/dev/null | grep '^..5' | wc -l
      register: file_permissions_check
      changed_when: false
      failed_when: false

    - name: "CIS 6.1.1 | L1 | Result: Pass if no system file permission issues"
      debug:
        msg: "Compliant: No system file permission issues found."
      when: file_permissions_check.stdout|int == 0

    - name: "CIS 6.1.1 | L1 | Result: Fail if system file permission issues found"
      fail:
        msg: "Remediation: {{ file_permissions_check.stdout }} files have permission issues. Run 'dpkg --verify' and fix permissions"
      when: file_permissions_check.stdout|int > 0

    # 6.1.2 Ensure permissions on /etc/passwd are configured
    - name: "CIS 6.1.2 | L1 | Check /etc/passwd permissions"
      stat:
        path: "/etc/passwd"
      register: passwd_stat

    - name: "CIS 6.1.2 | L1 | Result: Pass if /etc/passwd permissions are correct"
      debug:
        msg: "Compliant: /etc/passwd has correct permissions and ownership."
      when: passwd_stat.stat.exists and passwd_stat.stat.mode == '0644' and passwd_stat.stat.pw_name == 'root' and passwd_stat.stat.gr_name == 'root'

    - name: "CIS 6.1.2 | L1 | Result: Fail if /etc/passwd permissions are incorrect"
      fail:
        msg: "Remediation: Set correct permissions with 'chown root:root /etc/passwd && chmod 644 /etc/passwd'"
      when: not passwd_stat.stat.exists or passwd_stat.stat.mode != '0644' or passwd_stat.stat.pw_name != 'root' or passwd_stat.stat.gr_name != 'root'

    # 6.1.3 Ensure permissions on /etc/shadow are configured
    - name: "CIS 6.1.3 | L1 | Check /etc/shadow permissions"
      stat:
        path: "/etc/shadow"
      register: shadow_stat

    - name: "CIS 6.1.3 | L1 | Result: Pass if /etc/shadow permissions are correct"
      debug:
        msg: "Compliant: /etc/shadow has correct permissions and ownership."
      when: shadow_stat.stat.exists and shadow_stat.stat.mode == '0640' and shadow_stat.stat.pw_name == 'root' and shadow_stat.stat.gr_name == 'shadow'

    - name: "CIS 6.1.3 | L1 | Result: Fail if /etc/shadow permissions are incorrect"
      fail:
        msg: "Remediation: Set correct permissions with 'chown root:shadow /etc/shadow && chmod 640 /etc/shadow'"
      when: not shadow_stat.stat.exists or shadow_stat.stat.mode != '0640' or shadow_stat.stat.pw_name != 'root' or shadow_stat.stat.gr_name != 'shadow'

    # 6.1.4 Ensure permissions on /etc/group are configured
    - name: "CIS 6.1.4 | L1 | Check /etc/group permissions"
      stat:
        path: "/etc/group"
      register: group_stat

    - name: "CIS 6.1.4 | L1 | Result: Pass if /etc/group permissions are correct"
      debug:
        msg: "Compliant: /etc/group has correct permissions and ownership."
      when: group_stat.stat.exists and group_stat.stat.mode == '0644' and group_stat.stat.pw_name == 'root' and group_stat.stat.gr_name == 'root'

    - name: "CIS 6.1.4 | L1 | Result: Fail if /etc/group permissions are incorrect"
      fail:
        msg: "Remediation: Set correct permissions with 'chown root:root /etc/group && chmod 644 /etc/group'"
      when: not group_stat.stat.exists or group_stat.stat.mode != '0644' or group_stat.stat.pw_name != 'root' or group_stat.stat.gr_name != 'root'

    # 6.1.5 Ensure permissions on /etc/gshadow are configured
    - name: "CIS 6.1.5 | L1 | Check /etc/gshadow permissions"
      stat:
        path: "/etc/gshadow"
      register: gshadow_stat

    - name: "CIS 6.1.5 | L1 | Result: Pass if /etc/gshadow permissions are correct"
      debug:
        msg: "Compliant: /etc/gshadow has correct permissions and ownership."
      when: gshadow_stat.stat.exists and gshadow_stat.stat.mode == '0640' and gshadow_stat.stat.pw_name == 'root' and gshadow_stat.stat.gr_name == 'shadow'

    - name: "CIS 6.1.5 | L1 | Result: Fail if /etc/gshadow permissions are incorrect"
      fail:
        msg: "Remediation: Set correct permissions with 'chown root:shadow /etc/gshadow && chmod 640 /etc/gshadow'"
      when: not gshadow_stat.stat.exists or gshadow_stat.stat.mode != '0640' or gshadow_stat.stat.pw_name != 'root' or gshadow_stat.stat.gr_name != 'shadow'
      ignore_errors: yes
